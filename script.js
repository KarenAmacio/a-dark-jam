
        const state = {
            // Atributos do jogador
            energy: 70,
            progress: 0,
            sanity: 100,
            coffees: 0,
            testSessions: 0,
            spriteMade: false,
            askedForHelp: false,
            lastHelpDay: 0,
            ignoredWarnings: 0,
            turnsPlayed: 0,
            phase: 'beginning',
            time: 16 * 60 + 45, // minutos desde meia-noite - isso significa 16:45
            day: 1,
            

            // Estados de eventos
            coffeeLocked: true,
            coffeeBrewTime: 0,
            dogEventShown: false,
            phoneEventShown: false,
            mirrorEventShown: false,

            //fases do jogo
            spriteCount: 0, maxSprites: 5,
            mapCount: 0, maxMaps: 3,
            characterCount: 0, maxCharacters: 4,
            dialogueCount: 0, maxDialogues: 6,
            testCount: 0, maxTests: 4,
            rebugCount: 0, maxRebugs: 3,
            buildCount: 0, maxBuilds: 2,

            // salvamento r√°pido
            savedSnapshot: null,
            savedActive: false,
        };


        // Cooldowns globais para a√ß√µes (em turnos segundos)
        const cooldowns = {
            coffeeCooldown: 0,
            spriteCooldown: 0,
            mapCooldown: 0,
            characterCooldown: 0,
            dialogueCooldown: 0,
            testCooldown: 0,
            rebugCooldown: 0,
            pauseCooldown: 0,
            helpCooldown: 0,
        };


        // Desabilita todos os bot√µes para evitar cliques m√∫ltiplos
        function disableAllButtons() {
            const buttons = document.querySelectorAll('#choices button');
            buttons.forEach(btn => btn.disabled = true);
        }

        // Regras para disponibilidade de tarefas 
        const taskRules = {
            sprite: {
                prerequisite: (s) => s.coffeeLocked === false,
                countKey: 'spriteCount',
                limitKey: 'maxSprites'
            },

            map: {
                prerequisite: (s) => (s.spriteCount || 0) >= (s.maxSprites || 0),
                countKey: 'mapCount',
                limitKey: 'maxMaps'
            },

            character: {
                prerequisite: (s) => (s.mapCount || 0) >= (s.maxMaps || 0),
                countKey: 'characterCount',
                limitKey: 'maxCharacters'
            },

            dialogue: {
                prerequisite: (s) => (s.characterCount || 0) >= (s.maxCharacters || 0),
                countKey: 'dialogueCount',
                limitKey: 'maxDialogues'
            },

            test: {
                prerequisite: (s) => (s.dialogueCount || 0) >= 3,
                countKey: 'testCount',
                limitKey: 'maxTests'
            },

            rebug: {
                prerequisite: (s) => (s.testCount || 0) >= 1,
                countKey: 'rebugCount',
                limitKey: 'maxRebugs'
            },

            build: {
                prerequisite: (s) => (s.rebugCount || 0) >= 1 && (s.energy || 0) >= 40 && (s.sanity || 0) >= 50,
                countKey: 'buildCount',
                limitKey: 'maxBuilds'
            },

            publish: {
                prerequisite: (s) => (s.buildCount || 0) >= 1,
                countKey: null,
                limitKey: null
            }
    };

        function isTaskAvailable(taskName, s = state) {
            const rule = taskRules[taskName];
            if (!rule) return false;
            if (!rule.prerequisite) return true;
            if (!rule.prerequisite(s)) return false;
            if (!rule.countKey) return true;
            const count = s[rule.countKey] || 0;
            const limit = rule.limitKey ? (s[rule.limitKey] || Infinity) : Infinity;
            return count < limit;
        }

        
        // Registro simples das linhas mostradas no log de hist√≥ria.
        // Guarda apenas as strings para poss√≠veis usos futuros (debug, replays, savestates).
        const storyLog = [];

        /**
         * Adiciona uma linha ao log de hist√≥ria (DOM + array `storyLog`).
         * @param {string} text - Texto da linha a ser exibida (pode ser string vazia para espa√ßamento).
         * @param {boolean} isEvent - Se true, aplica a classe CSS 'event' para estilizar diferentemente.
         *
         * Observa√ß√µes:
         * - A fun√ß√£o tamb√©m aplica, aleatoriamente, a classe 'glitch' quando a sanidade est√° baixa
         *   para dar um efeito visual de degrada√ß√£o mental.
         * - Mant√©m o scroll no final do container para que as linhas novas fiquem vis√≠veis.
         */
        function addStoryLine(text, isEvent = false) {
            // Obtemos o container do log na p√°gina
            const logDiv = document.getElementById('story-log');



            // Criamos um elemento <div> para a nova linha e definimos suas classes
            const line = document.createElement('div');
            line.className = 'story-line' + (isEvent ? ' event' : '');
            line.textContent = text; // atribui o texto (pode ser "" para linha em branco)



            // Adiciona ao DOM e for√ßa o scroll para mostrar a linha rec√©m-adicionada
            logDiv.appendChild(line);
            logDiv.scrollTop = logDiv.scrollHeight;



            // Guarda tamb√©m no array de hist√≥rico (√∫til para salvar/rever sess√µes)
            storyLog.push(text);

            // Efeito visual: quando a sanidade est√° baixa, h√° uma chance de aplicar 'glitch'
            // Isso acrescenta variedade visual e comunica o estado do personagem.
            if (state.sanity < 30 && Math.random() < 0.3) {
                line.classList.add('glitch');
            }
        }
        // fun√ß√£o para adicionar linhas com delay
        function delayedLines(lines, finalCallback) {
                let delay = 0;
                lines.forEach((line, i) => {
                    setTimeout(() => addStoryLine(line), delay);
                    delay += 1500;
                });

                if (finalCallback) {
                    setTimeout(finalCallback, delay);
                }
        }

        // fun√ß√£o para atualizar o display de tempo
        function updateTime(minutes = 15) {
            state.time += minutes;
            //verifica se passou da meia-noite - adiciona um dia se for true
            if (state.time >= 24 * 60) {
                state.time -= 24 * 60;
                state.day++;

                forceSleep(); //chama a fun√ß√£o de for√ßar o sono
                return; //sai da fun√ß√£o para evitar atualizar o display duas vezes
            }

            //atualiza o display de tempo
             const hours = Math.floor(state.time / 60);
            const mins = state.time % 60;
            const timeStr = `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}`;
            document.getElementById('time-display').textContent = `DIA ${state.day} - ${timeStr}`;
            }

            //fun√ß√£o para for√ßar o sono ao passar da meia-noite
        function forceSleep() {
                delayedLines([
                    "",
                    "Voc√™ n√£o percebe, mas o cansa√ßo vence.",
                    "A tela escurece. Voc√™ dorme.",
                    "...",
                    "Voc√™ acorda no dia seguinte, √© 4h da manh√£.",
                    "Levanta cara, voc√™ tem que ir pra WEG.",
                    "Voc√™ aperta muito parafuso e volta pra casa. Ta na hora de voltar pro jogo.",
                ]);

                state.energy = Math.min(100, state.energy + 50);
                state.sanity = Math.min(100, state.sanity + 10);
                cooldowns.coffeeCooldown = 0;
                state.coffeeBrewTime = 0;

                renderChoices();
                }

        // Helper simples para garantir que valores fiquem dentro de um intervalo
        function clamp(value, min, max) {
            return Math.max(min, Math.min(max, value));
        }

        /**
         * Centraliza o fim de turno: incrementa turnsPlayed, atualiza tempo,
         * decrementa cooldowns e aplica clamps em energia/sanidade.
         * Chame essa fun√ß√£o ao final de qualquer a√ß√£o que consome um turno.
         */

       // ==== ‚è≥ AVAN√áO AUTOM√ÅTICO DO JOGO POR TEMPO REAL ====
        function endTurn(minutes = 1) {
            // üïí Registra que um turno passou
            state.turnsPlayed++;

            // üï∞Ô∏è Atualiza o rel√≥gio do jogo
            updateTime(minutes);

            // üîÅ Decrementa cooldowns em segundos
            for (let key in cooldowns) {
                if (cooldowns[key] > 0) {
                    cooldowns[key]--;
                }
            }

            // ‚òï Gerencia preparo do caf√©
            if (state.coffeeBrewTime > 0) {
                state.coffeeBrewTime--;

                if (state.coffeeBrewTime === 0) {
                    state.coffees += 15;
                    cooldowns.coffee = 0;
                    addStoryLine("O caf√© est√° pronto.");
                    renderChoices(); // mostra bot√£o ‚Äútomar caf√©‚Äù
                }
            }

            // üß† Garante que energia e sanidade fiquem dentro dos limites
            state.energy = clamp(state.energy, 0, 100);
            state.sanity = clamp(state.sanity, 0, 100);
        }

        

        function checkRandomEvents() {
            // Evento do cachorro
            if (!state.dogEventShown && state.turnsPlayed >= 3 && Math.random() < 0.15) {
                state.dogEventShown = true;
                addStoryLine("", true);
                addStoryLine("voc√™ ouve latidos l√° fora.", true);
                addStoryLine("", true);
                showEventChoice('dog');
                return true;
            }
            
            // Evento do celular
            if (!state.phoneEventShown && state.turnsPlayed >= 5 && state.sanity < 60 && Math.random() < 0.25) {
                state.phoneEventShown = true;
                addStoryLine("", true);
                addStoryLine("o celular vibra na mesa.", true);
                addStoryLine("√© algu√©m que voc√™ conhece.", true);
                showEventChoice('phone');
                return true;
            }
            // evento do caf√© foi mudado para dentro da fun√ß√£o makeCoffee 
            return false;
        }

        function showEventChoice(eventType) {
            //limpa as escolhas atuais
            const choicesDiv = document.getElementById('choices');
            choicesDiv.innerHTML = '';
            

            //evento do cachorro
            if (eventType === 'dog') {
                createButton('ir ver', () => {
                    addStoryLine("");
                    addStoryLine("voc√™ abre a porta. olha ao redor.");

                    if (Math.random() < 0.2) {
                    // Pegou o competidor no flagra
                    delayedLines([
                        "",
                        "um vulto corre pelo corredor.",
                        "voc√™ grita. ele foge.",
                        "era um competidor tentando sabotar sua energia.",
                        "voc√™ evita a perda e se sente mais alerta.",
                        ""
                    ]);
                    state.sanity += 10;
                    state.energy += 10;
                    } else {
                    // Era s√≥ o cachorro
                    delayedLines([
                        "",
                        "n√£o tem ningu√©m. s√≥ o cachorro abanando o rabo.",
                        "voc√™ fala pra ele ficar quieto.",
                        "algo estranho paira no ar, mas voc√™ n√£o consegue identificar.",
                        ""
                    ]);
                    state.sanity += 15;
                    state.energy += 5;
                    }

                    setTimeout(() => renderChoices(), 2000);
                });

                createButton('ignorar', () => {
                    delayedLines([
                        "",
                        "voc√™ decide ignorar.",
                        "os latidos continuam.",
                        "mas voc√™ foca no seu trabalho.",
                        ""
                    ]);
                    if (Math.random() < 0.2) {
                    // Sabotagem acontece
                    delayedLines([
                        "",
                        "de repente, a luz pisca.",
                        "a energia cai. tudo desliga.",
                        "voc√™ perdeu parte do progresso.",
                        ""
                    ]);
                    state.progress = Math.max(0, state.progress - 20);
                    state.sanity -= 15;
                    } else {
                    // Nada acontece
                    delayedLines([
                        "",
                        "nada acontece. s√≥ sil√™ncio."
                    ]);
                    state.sanity -= 5;
                    }

                    setTimeout(() => renderChoices(), 2000);
                }, true);
            }

            //evento do celular
            else if (eventType === 'phone') {
                createButton('atender', () => {
                    delayedLines([
                        "",
                        "voc√™ atende. uma voz familiar.",
                        "'como voc√™ est√°?'",
                        "voc√™ conversa por alguns minutos.",
                        "voc√™ se sente um pouco melhor.",
                        ""
                    ]);
                    state.sanity += 10;
                    state.energy += 5;
                    updateTime(20);
                    setTimeout(() => renderChoices(), 2000);
                });
                createButton('ignorar', () => {
                    delayedLines([
                        "",
                        "voc√™ decide n√£o atender.",
                        "o telefone para de vibrar.",
                        "sil√™ncio novamente, voc√™ se sente sozinho.",
                        ""
                    ]);
                    state.sanity -= 10;
                    setTimeout(() => renderChoices(), 2000);
                }, true);

                //evento do espelho
            } else if (eventType === 'mirror') {
                createButton('encarar o reflexo', () => {
                    delayedLines([
                        "",
                        "voc√™ encara o espelho.",
                        "por um instante, o reflexo n√£o acompanha seu movimento.",
                        "ele sorri. voc√™ n√£o.",
                        "um arrepio percorre sua espinha.",
                        ""
                    ]);
                    state.sanity -= 12;
                    setTimeout(() => renderChoices(), 2000);
                });

                createButton('desviar o olhar', () => {
                    delayedLines([
                        "",
                        "voc√™ desvia o olhar.",
                        "n√£o quer mais ver aquilo.",
                        "mas sente que algo ficou preso l√° dentro.",
                        ""
                    ]);
                    state.sanity -= 3;
                    setTimeout(() => renderChoices(), 2000);
                });

                createButton('cobrir o espelho', () => {
                    delayedLines([
                        "",
                        "voc√™ pega um pano e cobre o espelho.",
                        "n√£o quer mais ver aquilo.",
                        "mas sente que algo ficou preso l√° dentro.",
                        ""
                    ]); 
                    state.sanity -= 5;
                    state.energy -= 5;
                    setTimeout(() => renderChoices(), 2000);
                });
                }

        }


        //cria o bot√£o de escolha  DANGER
        function createButton(text, onClick, isDanger = false) {
            const button = document.createElement('button');
            button.textContent = text;
            if (isDanger) button.className = 'danger';
            button.onclick = onClick;
            document.getElementById('choices').appendChild(button);
        }

        function renderChoices() {
            const choicesDiv = document.getElementById('choices');
            choicesDiv.innerHTML = '';

            if (checkRandomEvents()) return;

            // === A√ß√µes utilit√°rias ====

            // Fazer mais caf√©
            if (cooldowns.coffeeCooldown === 0 && state.coffeeBrewTime === 0 && state.coffeeLocked && state.coffees === 0) {
                const button = document.createElement('button');
                button.textContent = 'fazer caf√©';
                button.onclick = () => makeCoffee();
                choicesDiv.appendChild(button);
            }

            // Caf√© sendo preparado
            if (cooldowns.coffeeBrewTime > 0) {
                const button = document.createElement('button');
                button.textContent = `preparando caf√©... (${state.coffeeBrewTime})`;
                button.disabled = true;
                choicesDiv.appendChild(button);
            }

            // Caf√© pronto para tomar
            if (cooldowns.coffeeCooldown === 0 && state.coffees > 0) {
                const button = document.createElement('button');
                button.textContent = 'tomar caf√©';
                button.onclick = () => drinkCoffee();
                choicesDiv.appendChild(button);
            }


           // Pausa
            if (state.turnsPlayed >= 6) {
                const button = document.createElement('button');
                if (cooldowns.pauseCooldown > 0) {
                    button.textContent = `fazer uma pausa (aguarde ${cooldowns.pauseCooldown})`;
                    button.disabled = true;
                } else {
                    button.textContent = 'fazer uma pausa';
                    button.onclick = () => takePause();
                }
                choicesDiv.appendChild(button);
            }

            // Op√ß√µes cr√≠ticas: se mais de 4 turnos jogados e energia baixa
            // op√ß√£o chamar ajuda s√≥ uma vez ao dia
            // op√ß√£o ignorar o cansa√ßo sempre dispon√≠vel
            if (state.turnsPlayed >= 4 && state.energy < 35) {
                if (state.lastHelpDay !== state.day) {
                    const button = document.createElement('button');
                    button.textContent = 'pedir ajuda';
                    button.onclick = () => {
                        askForHelp();
                        state.lastHelpDay = state.day; // registra o dia em que pediu ajuda
                    };
                    choicesDiv.appendChild(button);
                }

                const button = document.createElement('button');
                button.textContent = 'ignorar o cansa√ßo';
                button.className = 'danger';
                button.onclick = () => ignoreWarning();
                choicesDiv.appendChild(button);
            }


            // ==== üéØ FASES DO JOGO ====
            if (isTaskAvailable('sprite')) {
                const btn = document.createElement('button');
                btn.textContent = cooldowns.spriteCooldown > 0 ? `fazer sprite (aguarde ${cooldowns.spriteCooldown})` : 'fazer sprite';
                btn.disabled = cooldowns.spriteCooldown > 0;
                if (cooldowns.spriteCooldown === 0) btn.onclick = makeSprite;
                choicesDiv.appendChild(btn);
            }

            if (isTaskAvailable('map')) {
                const btn = document.createElement('button');
                btn.textContent = cooldowns.mapCooldown > 0 ? `fazer mapa (aguarde ${cooldowns.mapCooldown})` : 'fazer mapa';
                btn.disabled = cooldowns.mapCooldown > 0;
                if (cooldowns.mapCooldown === 0) btn.onclick = makeMap;
                choicesDiv.appendChild(btn);
            }

            if (isTaskAvailable('character')) {
                const btn = document.createElement('button');
                btn.textContent = cooldowns.characterCooldown > 0 ? `fazer personagem (aguarde ${cooldowns.characterCooldown})` : 'fazer personagem';
                btn.disabled = cooldowns.characterCooldown > 0;
                if (cooldowns.characterCooldown === 0) btn.onclick = makeCharacter;
                choicesDiv.appendChild(btn);
            }

            if (isTaskAvailable('dialogue')) {
                const btn = document.createElement('button');
                btn.textContent = cooldowns.dialogueCooldown > 0 ? `fazer di√°logo (aguarde ${cooldowns.dialogueCooldown})` : 'fazer di√°logo';
                btn.disabled = cooldowns.dialogueCooldown > 0;
                if (cooldowns.dialogueCooldown === 0) btn.onclick = makeDialogue;
                choicesDiv.appendChild(btn);
            }

            if (isTaskAvailable('test')) {
                const btn = document.createElement('button');
                btn.textContent = cooldowns.testCooldown > 0 ? `fazer teste (aguarde ${cooldowns.testCooldown})` : 'fazer teste';
                btn.disabled = cooldowns.testCooldown > 0;
                if (cooldowns.testCooldown === 0) btn.onclick = makeTest;
                choicesDiv.appendChild(btn);
            }

            if (isTaskAvailable('build')) {
                const btn = document.createElement('button');
                btn.textContent = cooldowns.buildCooldown > 0 ? `fazer build (aguarde ${cooldowns.buildCooldown})` : 'fazer build';
                btn.disabled = cooldowns.buildCooldown > 0;
                if (cooldowns.buildCooldown === 0) btn.onclick = makeBuild;
                choicesDiv.appendChild(btn);
            }

            if (isTaskAvailable('publish')) {
                const btn = document.createElement('button');
                btn.textContent = cooldowns.publishCooldown > 0 ? `fazer publish (aguarde ${cooldowns.publishCooldown})` : 'fazer publica√ß√£o';
                btn.disabled = cooldowns.publishCooldown > 0;
                if (cooldowns.publishCooldown === 0) btn.onclick = makePublish;
                choicesDiv.appendChild(btn);
            }

        }   

//==== üéØ A√á√ïES DISPON√çVEIS ====



// ==== ‚òï IN√çCIO DO PREPARO DO CAF√â ====
        function makeCoffee() {
            disableAllButtons();  
            delayedLines([
                "",
                "voc√™ se levanta.",
                "caminha at√© a cozinha.",
                "√°gua na m√°quina. p√≥ no filtro.",
                "o caf√© come√ßa a gotejar.",
                ""
            ], () => {
                // ==== ü™û EVENTO DO ESPELHO ====
                if (!state.mirrorEventShown && state.sanity < 40 && state.energy < 30 && Math.random() < 0.2) {
                    state.mirrorEventShown = true;
                    delayedLines([
                        "",
                        "voc√™ olha para o espelho na cozinha...",
                        "algo est√° diferente."
                    ], () => {
                        showEventChoice('mirror');
                    });
                    return;
                }

                // ==== ‚è≥ INICIA PREPARO DO CAF√â ====
                state.coffeeBrewTime = 10;       // tempo real em segundos
                state.coffeeLocked = true;

                // Caf√© ficar√° pronto automaticamente ap√≥s o tempo
                setTimeout(() => {
                    state.coffeeBrewTime = 0;
                    state.coffees += 15;
                    addStoryLine("o caf√© est√° pronto.");
                    endTurn(15);
                    renderChoices();
                }, 5000); // 5 segundos reais
            });
        }



            // ==== ‚òï TOMAR CAF√â ====
        function drinkCoffee() {
            disableAllButtons();  
            const blocks = [
                ["voc√™ toma o caf√©.", "est√° quente. amargo.", "voc√™ sente o corpo despertar um pouco."],
                ["mais caf√©.", "o gosto j√° √© familiar.", "como um ritual."],
                ["a x√≠cara est√° morna.", "voc√™ bebe mesmo assim.", "precisa continuar."],
                ["voc√™ mal sente o gosto.", "apenas o h√°bito.", "a necessidade."]
            ];

            // üé≤ Sorteia um bloco aleat√≥rio
            const index = Math.floor(Math.random() * blocks.length);
            const selectedBlock = blocks[index];

            delayedLines(["", ...selectedBlock, ""], () => {
                const boost = Math.floor(state.coffees * 2);
                state.energy = Math.min(100, state.energy + boost);
                state.sanity -= 2;
                cooldowns.coffeeCooldown = 3;
                state.coffees--;
                state.coffeeLocked = false;
                endTurn(3);

                setTimeout(() => {
                    renderChoices();
                }, 3000);
            });
        }


        // ==== üíª FAZER SPRITE (FASE 01) ====

        function makeSprite() {

            if (!isTaskAvailable('sprite')) {
                addStoryLine("Essa tarefa n√£o est√° dispon√≠vel no momento.");
                return;
            }
            disableAllButtons();  
             const blocks = [
                ["voc√™ abre o paint.", "pixel por pixel.", "um quadrado vermelho, um quadrado azul.", "√©... um sprite."],
                ["um pixel fora do lugar.", "voc√™ corrige.", "agora parece errado de outro jeito."],
                ["voc√™ desenha um rosto.", "n√£o sabe se est√° feliz ou assustado.", "decide n√£o mexer."],
                ["a paleta √© limitada.", "voc√™ for√ßa contraste.", "funciona, mais ou menos."],
                ["voc√™ anima um passo.", "ele engasga no meio.", "voc√™ aceita assim."],
                ["o sprite pisca.", "n√£o era pra piscar.", "mas ficou bom."],
                ["voc√™ copia e cola.", "ajusta dois pixels.", "chama de vers√£o nova."],
                ["o personagem vira de lado.", "parece outra pessoa.", "voc√™ gosta disso."],
                ["voc√™ tenta sombrear.", "fica pior.", "volta pro plano original."],
            ];
        
            // üé≤ Sorteia um bloco aleat√≥rio
            const index = Math.floor(Math.random() * blocks.length);
            const selectedBlock = blocks[index];

            delayedLines(["", ...selectedBlock, ""], () =>{
            state.spriteCount++;    
            state.spriteMade = true;
            state.energy -= 10;
            cooldowns.spriteCooldown = 5;
            endTurn(5);
            
            checkGameOver();
            setTimeout(() => renderChoices(), 5000);
        });
        }

        // ==== FASE DE MAPA (FASE 02) ====
    
        function makeMap() {
            if (!isTaskAvailable('map')) {
                addStoryLine("Essa tarefa n√£o est√° dispon√≠vel no momento.");
                return;
            }

            disableAllButtons();  
            const blocks = [
                ["voc√™ abre o editor de mapas.", "grid alinhado, pronto.", "um ret√¢ngulo vira sala."],
                ["voc√™ desenha um corredor curto.", "muda a cor do ch√£o.", "fica funcional."],
                ["coloca uma porta simples.", "a ma√ßaneta range s√≥ um pouco.", "decide que serve."],
                ["marca uma escada com pixels.", "o personagem sobe sem glamour.", "ok, sobe."],
                ["pinta um canto escuro.", "algu√©m pode se perder ali.", "pode ser interessante."],
            ];

            // üé≤ Sorteia um bloco aleat√≥rio
            const index = Math.floor(Math.random() * blocks.length);
            const selectedBlock = blocks[index];

            delayedLines(["", ...selectedBlock, ""], () => {    
                state.mapCount++;
                state.mapMade = true;
                state.energy -= 10;
                cooldowns.mapCooldown = 5;
                endTurn(5);

                checkGameOver();
                setTimeout(() => renderChoices(), 5000);
            });
        }

        // ==== FASE DE PERSONAGENS (FASE 03) ====
        function makeCharacter() {
            if (!isTaskAvailable('character')) {
                addStoryLine("Essa tarefa n√£o est√° dispon√≠vel no momento.");
                return;
            }

            disableAllButtons();  
            const characterBlocks = [
                ["voc√™ desenha uma silhueta.", "usa bota de salto.", "hmm... essa √© a Tassiana."],
                ["vamo fazer um cara com alargador.", "ele parece ser envolvido em cultura pop.", "pode ser Juninho, eu acho."],
                ["cria um personagem bem nerd.", "viciado em instalar Linux nas m√°quinas do jogo.", "que tal Andrei pro nome hein?"],
                ["vamos colocar um cara que ainda coda em Java hoje em dia.", "ele tem cara de quem defende isso com orgulho.", "esse vai ser o Leonardo."],
                ["tem um cara estranho que vem perguntar pro player se quer ir pra rob√≥tica.", "ele pode ser tipo o jumpscare.", "Manfred, um bom nome."],
            ];
            // üé≤ Sorteia um bloco aleat√≥rio
            const index = Math.floor(Math.random() * characterBlocks.length);
            const selectedBlock = characterBlocks[index];
            delayedLines(["", ...selectedBlock, ""], () => {    
                state.characterCount++;
                state.characterMade = true;
                state.energy -= 10;
                cooldowns.characterCooldown = 5;
                endTurn(5); 
                checkGameOver();
                setTimeout(() => renderChoices(), 5000);
            });
        }

        // ==== FASE DE DI√ÅLOGOS (FASE 04) ====
        function makeDialogue() {
            if (!isTaskAvailable('dialogue')) {
                addStoryLine("Essa tarefa n√£o est√° dispon√≠vel no momento.");
                return;
            }
           
            disableAllButtons();  
            const dialogueBlocks = [
                ["Tassiana te encara por 3 segundos.", "ela pergunta se voc√™ fez o relat√≥rio do PAC.", "voc√™ mente que sim."],
                ["Juninho mostra um p√¥ster de anime.", "voc√™ n√£o reconhece.", "ele te chama de normie."],
                ["Andrei instala Arch Linux no seu invent√°rio.", "voc√™ n√£o pediu isso.", "ele diz que √© pela performance."],
                ["Leonardo fala sobre Java.", "ningu√©m pediu.", "ele continua mesmo assim."],
                ["Manfred aparece do nada.", "pergunta se voc√™ quer ir pra rob√≥tica.", "voc√™ diz n√£o, ele diz que vai buscar os trof√©us."],
                ["um personagem sem nome te observa.", "ele n√£o fala nada.", "voc√™ sente que foi julgado."],
                ["algu√©m te pergunta se voc√™ prefere sprites ou mapas.", "voc√™ responde mapas.", "ele te bloqueia."]
            ];

            // üé≤ Sorteia um bloco aleat√≥rio
            const index = Math.floor(Math.random() * dialogueBlocks.length);
            const selectedBlock = dialogueBlocks[index];    
            delayedLines(["", ...selectedBlock, ""], () => {
                state.dialogueCount++;
                state.dialogueMade = true;
                state.energy -= 10;
                cooldowns.dialogueCooldown = 5;
                endTurn(5);
                checkGameOver();
                setTimeout(() => renderChoices(), 5000);
            });
        }

        // === FASE DE TESTE (FASE 05) ===

        function testGame() {
            if (!isTaskAvailable('test')) {
                addStoryLine("Essa tarefa n√£o est√° dispon√≠vel no momento.");
                return;
            }

            disableAllButtons();  
            const blocks = [
                ["voc√™ abre o editor.", "a tela pisca. cursor pulsando.", "voc√™ come√ßa a escrever."],
                ["mais linhas de c√≥digo.", "algumas funcionam.", "outras n√£o."],
                ["voc√™ corrige um bug.", "tr√™s novos aparecem.", "mas voc√™ continua."],
                ["as linhas come√ßam a se embaralhar.", "voc√™ pisca. tenta focar.", "continua digitando."],
                ["voc√™ n√£o tem certeza do que est√° fazendo.", "mas suas m√£os continuam.", "m√∫sculo. mem√≥ria."]
            ];

            // üé≤ Sorteia um bloco aleat√≥rio
            const index = Math.floor(Math.random() * blocks.length);
            const selectedBlock = blocks[index];

            delayedLines(["", ...selectedBlock, ""], () => {
                const efficiency = Math.max(5, 15 - state.testSessions);
                state.progress += efficiency;
                state.energy -= 15;
                state.sanity -= 5;
                state.testSessions++;
                cooldowns.testCooldown = 2;
                endTurn(30);

                if (state.testSessions >= 3 && state.phase === 'beginning') {
                    state.phase = 'deteriorating';
                    document.body.className = 'deteriorating';
                }
                if (state.testSessions >= 6 && state.phase === 'deteriorating') {
                    state.phase = 'collapsing';
                    document.body.className = 'collapsing';
                }
                if (state.sanity < 20 || state.energy < 20) {
                    document.body.classList.add('critical');
                }

                checkGameOver();
                setTimeout(() => renderChoices(), 1500);
            });
        }

        // ==== DEBUG: FASE DE REBUG (FASE 06) ====
        function rebugGame() {
            if (!isTaskAvailable('rebug')) {
                addStoryLine("Essa tarefa n√£o est√° dispon√≠vel no momento.");
                return;
            }

            disableAllButtons();  
            const blocks = [
                ["voc√™ revisita o c√≥digo antigo.", "encontra linhas confusas.", "decide reescrever."],
                ["voc√™ encontra um bug estranho.", "ele some quando voc√™ olha.", "mas volta quando desvia o olhar."],
                ["voc√™ tenta isolar o problema.", "mas ele parece se multiplicar.", "voc√™ respira fundo e continua."],
            ];  

             // üé≤ Sorteia um bloco aleat√≥rio
            const index = Math.floor(Math.random() * blocks.length);
            const selectedBlock = blocks[index];

            delayedLines(["", ...selectedBlock, ""], () => {
                state.rebugCount++;
                state.energy -= 15;
                state.sanity -= 15;
                cooldowns.rebugCooldown = 3;
                endTurn(15);

                checkGameOver();
                setTimeout(() => renderChoices(), 6000);
            });
        }

        // === OP√á√ïES EXTRAS === 
        function takePause() {
            disableAllButtons();
            const blocks = [
                ["voc√™ se afasta do computador.", "respira fundo.", "olha pela janela."],
                ["o mundo l√° fora parece calmo.", "voc√™ fecha os olhos por um momento.", "tenta se reconectar."],
                ["voc√™ estica os bra√ßos.", "sente os m√∫sculos relaxarem.", "uma breve pausa."],
            ];

            const index = Math.floor(Math.random() * blocks.length);
            const selectedBlock = blocks[index];

            delayedLines(["", ...selectedBlock, ""], () => {
                state.energy += 15;
                state.sanity += 15;
                cooldowns.pauseCooldown = 20;
                endTurn(15);
            
            setTimeout(() => renderChoices(), 4000);
        }); 
    }

        // ==== üìû PEDIR AJUDA ====
        function askForHelp() {
            disableAllButtons();
            const blocks = [
                ["voc√™ abre o discord.", "digita uma mensagem.", "espera."],
                ["voc√™ escreve 'algu√©m a√≠?'", "ningu√©m responde por um tempo.", "depois algu√©m aparece."],
                ["voc√™ manda um print do erro.", "algu√©m diz 'j√° tentou reiniciar?'", "voc√™ tenta n√£o gritar."],
                ["voc√™ pergunta se mais algu√©m t√° travado.", "descobre que sim.", "isso ajuda um pouco."],
                ["voc√™ s√≥ escreve 'socorro'.", "algu√©m manda um meme.", "voc√™ ri, meio triste."],
                ["voc√™ explica o bug.", "algu√©m entende.", "voc√™ sente que n√£o t√° sozinho."]
            ];
            
           
            const index = Math.floor(Math.random() * blocks.length);
            const selectedBlock = blocks[index];

            delayedLines(["", ...selectedBlock, ""], () => {
            state.askedForHelp = true;
            state.sanity += 25;
            state.progress += 20;
            state.energy += 10;
            cooldowns.helpCooldown = 60;
            endTurn(20);
            
            checkGameOver();
            setTimeout(() => renderChoices(), 5000);
        }); 
    }   

        // ==== ‚ö†Ô∏è IGNORAR AVISOS DE CANSAN√áO ====
        function ignoreWarning() {
            disableAllButtons();
            delayedLines([
                "",
                "voc√™ ignora o cansa√ßo.",
                "ignora a dor de cabe√ßa.",
                "ignora tudo.",
                "menos o c√≥digo.",
                "",
            ], () => {
                
            state.ignoredWarnings++;
            state.progress += 12;
            state.sanity -= 20;
            state.energy -= 10;
            endTurn(35);
            
            if (state.ignoredWarnings >= 2) {
                const lines = document.querySelectorAll('.story-line');
                lines.forEach(line => {
                    if (Math.random() < 0.5) line.classList.add('glitch');
                });
            }
            
            checkGameOver();
            setTimeout(() => renderChoices(), 2500);
        });
    }


        // ==== üéØ CHECAGEM DE FIM DE JOGO ====
        function checkGameOver() {
            disableAllButtons();
            if (state.progress >= 100) {
                if (state.askedForHelp) {
                    showEnding('recovery');
                } else if (state.ignoredWarnings >= 3) {
                    showEnding('toxic');
                } else {
                    showEnding('normal');
                }
                return true;
            }

            if (state.energy <= 0 || state.sanity <= 0) {
                showEnding('collapse');
                return true;
            }

            return false;
        }

        function showEnding(type) {
            disableAllButtons();
            const endings = {
                recovery: [
                    "",
                    "voc√™ desacelera.",
                    "pede ajuda.",
                    "aceita que n√£o precisa fazer tudo sozinho.",
                    "",
                    "o jogo fica pronto.",
                    "voc√™ se orgulha dele.",
                    "",
                    "e mais importante:",
                    "voc√™ ainda est√° inteiro.",
                    "",
                    "[ FIM - RECUPERA√á√ÉO ]"
                ],
                toxic: [
                    "",
                    "voc√™ entrega o jogo.",
                    "ele funciona.",
                    "",
                    "mas quando voc√™ fecha o computador,",
                    "algo est√° diferente.",
                    "",
                    "voc√™ pagou um pre√ßo.",
                    "n√£o tem certeza se valeu.",
                    "",
                    "[ FIM - ENTREGA T√ìXICA ]"
                ],
                collapse: [
                    "",
                    "o mundo se fecha.",
                    "",
                    "as bordas escurecem.",
                    "",
                    "o texto embaralha.",
                    "",
                    "voc√™ tentou.",
                    "mas era demais.",
                    "",
                    "[ FIM - COLAPSO ]"
                ],
                normal: [
                    "",
                    "voc√™ termina o jogo.",
                    "ele n√£o √© perfeito.",
                    "",
                    "mas est√° pronto.",
                    "voc√™ sobreviveu.",
                    "",
                    "a game jam come√ßa amanh√£.",
                    "",
                    "[ FIM - SOBREVIV√äNCIA ]"
                ]
            };

            setTimeout(() => {
                endings[type].forEach((line, index) => {
                    setTimeout(() => addStoryLine(line), index * 800);
                });
                
                if (type === 'collapse') {
                    setTimeout(() => {
                        document.body.style.opacity = '0';
                    }, endings[type].length * 800 + 2000);
                }
            }, 1000);

            document.getElementById('choices').innerHTML = '';
        }

        // Inicializa√ß√£o
        function startGame() {
            delayedLines([
                "voc√™ est√° no quarto.",
                "sentado no computador.",
                "a caneca de caf√© est√° quase vazia.",
                "",
                "faltam dois dias para a game jam."
            ]);

            setTimeout(() => renderChoices(), 2000);
        }

        startGame();
